#include <SPI.h>
#include <MFRC522.h>

#define SS_PIN 5        // Pin SDA conectado al GPIO 5 del ESP32
#define RST_PIN 22      // Pin RST conectado al GPIO 22 del ESP32

MFRC522 rfid(SS_PIN, RST_PIN); // Instancia de la clase MFRC522

MFRC522::MIFARE_Key key; 

// Arreglo que almacenará el NUID leído
byte nuidPICC[4];

void setup() { 
  Serial.begin(115200);   // Inicializar el puerto serie a 115200 baudios
  SPI.begin(18, 19, 23);  // Inicializar bus SPI con los pines correspondientes para el ESP32 (SCK, MISO, MOSI)
  rfid.PCD_Init();        // Inicializar MFRC522

  // Inicializar la clave con valores FFFFFFFFFFFFh
  for (byte i = 0; i < 6; i++) {
    key.keyByte[i] = 0xFF;
  }

  Serial.println(F("Este código escanea el NUID de una tarjeta MIFARE Classic."));
  Serial.print(F("Usando la siguiente clave:"));
  printHex(key.keyByte, MFRC522::MF_KEY_SIZE);
}
 
void loop() {
  // Si no hay una nueva tarjeta presente, reiniciar el loop
  if (!rfid.PICC_IsNewCardPresent())
    return;

  // Si no se ha podido leer el NUID, reiniciar el loop
  if (!rfid.PICC_ReadCardSerial())
    return;

  Serial.print(F("Tipo de PICC: "));
  MFRC522::PICC_Type piccType = rfid.PICC_GetType(rfid.uid.sak);
  Serial.println(rfid.PICC_GetTypeName(piccType));

  // Verificar si el PICC es de tipo MIFARE Classic
  if (piccType != MFRC522::PICC_TYPE_MIFARE_MINI &&  
      piccType != MFRC522::PICC_TYPE_MIFARE_1K &&
      piccType != MFRC522::PICC_TYPE_MIFARE_4K) {
    Serial.println(F("Tu etiqueta no es del tipo MIFARE Classic."));
    return;
  }

  // Verificar si el NUID ha cambiado
  if (rfid.uid.uidByte[0] != nuidPICC[0] || 
      rfid.uid.uidByte[1] != nuidPICC[1] || 
      rfid.uid.uidByte[2] != nuidPICC[2] || 
      rfid.uid.uidByte[3] != nuidPICC[3]) {

    Serial.println(F("Se ha detectado una nueva tarjeta."));

    // Almacenar el nuevo NUID
    for (byte i = 0; i < 4; i++) {
      nuidPICC[i] = rfid.uid.uidByte[i];
    }

    Serial.println(F("El NUID de la etiqueta es:"));
    Serial.print(F("En hex: "));
    printHex(rfid.uid.uidByte, rfid.uid.size);
    Serial.println();
    Serial.print(F("En dec: "));
    printDec(rfid.uid.uidByte, rfid.uid.size);
    Serial.println();
  } else {
    Serial.println(F("Tarjeta leída previamente."));
  }

  // Detener la tarjeta PICC
  rfid.PICC_HaltA();

  // Detener la criptografía en PCD
  rfid.PCD_StopCrypto1();
}

/**
 * Rutina de ayuda para imprimir un arreglo de bytes en formato hexadecimal
 */
void printHex(byte *buffer, byte bufferSize) {
  for (byte i = 0; i < bufferSize; i++) {
    Serial.print(buffer[i] < 0x10 ? " 0" : " ");
    Serial.print(buffer[i], HEX);
  }
}

/**
 * Rutina de ayuda para imprimir un arreglo de bytes en formato decimal
 */
void printDec(byte *buffer, byte bufferSize) {
  for (byte i = 0; i < bufferSize; i++) {
    Serial.print(buffer[i] < 0x10 ? " 0" : " ");
    Serial.print(buffer[i], DEC);
  }
}
